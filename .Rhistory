quit()
## cachematrix is a suite of two functions that work together to store and retrieve
## the inverse of a matrix of interest. The inverse matrix data, once calculated, is
## stored in an object placed in an environment other than the environment in which
## the functions operate. This allows for a stable maintenance of the data, so that
## the inverse of the matrix need not be recalculated once it exists.
## The two functions are makeCacheMatrix  and cacheSolve.
## Acknowledgements:
## My understanding of the processes necessary to this suite was enhanced by
## two sources:
## 1) John Chamber's remarks on "environments" in Chapter 5 of "Software for Data
##    Analysis, Programming with R"
## 2) Norman Matloff's comments on using the superassignment operator in section 7.8
##    of "The Art of R Programming". The section is titled 'Writing Upstairs'!
## Comments on the first function:
## makeCacheMatrix takes an invertible matrix as it's argument and performs two
## important tasks. It creates an object in an environment "outside" that of
## environment of the function that will hold or "cache" the results of applying
## the solve function to the matrix. makeCacheMatrix does not employ the solve
## function itself, (that's the job of the other function in the suite), but, for
## it's second task, returns a list whose elements are the original matirx and functions
## that will allow for the transport of data to and from the "outside" environment.
##
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Comments on the second function:
##cacheSolve does the work of retrieving the desired inverse matrix, if it exists in the
##object "upstairs" created by makeCacheMatrix, or, if not, solving for the inverse,cacheing
## it and returning it to the user. cacheSolve takes as its argument the list created
##by the first function.
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# If the matrix inverse has been calculated, return its cached value
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
# Calculate, using solve(), the matrix inverse, if the inverse has not yet been calculated.
data <- x$get()
inv <- solve(data, ...)
# Now cache the newly created inverse
x$setinv(inv)
# Now return the newly cached value
inv
}
## Here are some examples of the exploits of this suite, as well as a brief look at the
## internals of the objects returned by each.
##
## First, creat a matrix to pass to makeCacheMatrix:
## > TestMatrix <- matrix(c(7,9,11,47,1,9,5,4,2),nrow=3,ncol=3)
## Hand it over to makeCacheMatrix and assign the result:
## > TestMatrixList <- makeCacheMatrix(TestMatrix)
## Check to see if the original matrix an element of this list.
## > TestMatrixList$get()
##       [,1] [,2] [,3]
##[1,]    7   47    5
##[2,]    9    1    4
##[3,]   11    9    2
## Running cacheSolve now will create it's inverse and store it.
## > cacheSolve(TestMatrixList)
##         [,1]        [,2]        [,3]
##[1,] -0.02548726 -0.03673163  0.13718141
##[2,]  0.01949025 -0.03073463  0.01274363
##[3,]  0.05247376  0.34032984 -0.31184408
##
## Running cacheSolve again will retrieve it from the cache, rather
## than recalculating:
##
## > cacheSolve(TestMatrixList)
##getting cached data
##        [,1]        [,2]        [,3]
##[1,] -0.02548726 -0.03673163  0.13718141
##[2,]  0.01949025 -0.03073463  0.01274363
##[3,]  0.05247376  0.34032984 -0.31184408
ls()
quit()
## cachematrix is a suite of two functions that work together to store and retrieve
## the inverse of a matrix of interest. The inverse matrix data, once calculated, is
## stored in an object placed in an environment other than the environment in which
## the functions operate. This allows for a stable maintenance of the data, so that
## the inverse of the matrix need not be recalculated once it exists.
## The two functions are makeCacheMatrix  and cacheSolve.
## Acknowledgements:
## My understanding of the processes necessary to this suite was enhanced by
## two sources:
## 1) John Chamber's remarks on "environments" in Chapter 5 of "Software for Data
##    Analysis, Programming with R"
## 2) Norman Matloff's comments on using the superassignment operator in section 7.8
##    of "The Art of R Programming". The section is titled 'Writing Upstairs'!
## Comments on the first function:
## makeCacheMatrix takes an invertible matrix as it's argument and performs two
## important tasks. It creates an object in an environment "outside" that of
## environment of the function that will hold or "cache" the results of applying
## the solve function to the matrix. makeCacheMatrix does not employ the solve
## function itself, (that's the job of the other function in the suite), but, for
## it's second task, returns a list whose elements are the original matirx and functions
## that will allow for the transport of data to and from the "outside" environment.
##
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Comments on the second function:
##cacheSolve does the work of retrieving the desired inverse matrix, if it exists in the
##object "upstairs" created by makeCacheMatrix, or, if not, solving for the inverse,cacheing
## it and returning it to the user. cacheSolve takes as its argument the list created
##by the first function.
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# If the matrix inverse has been calculated, return its cached value
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
# Calculate, using solve(), the matrix inverse, if the inverse has not yet been calculated.
data <- x$get()
inv <- solve(data, ...)
# Now cache the newly created inverse
x$setinv(inv)
# Now return the newly cached value
inv
}
## Here are some examples of the exploits of this suite, as well as a brief look at the
## internals of the objects returned by each.
##
## First, creat a matrix to pass to makeCacheMatrix:
## > TestMatrix <- matrix(c(7,9,11,47,1,9,5,4,2),nrow=3,ncol=3)
## Hand it over to makeCacheMatrix and assign the result:
## > TestMatrixList <- makeCacheMatrix(TestMatrix)
## Check to see if the original matrix an element of this list.
## > TestMatrixList$get()
##       [,1] [,2] [,3]
##[1,]    7   47    5
##[2,]    9    1    4
##[3,]   11    9    2
## Running cacheSolve now will create it's inverse and store it.
## > cacheSolve(TestMatrixList)
##         [,1]        [,2]        [,3]
##[1,] -0.02548726 -0.03673163  0.13718141
##[2,]  0.01949025 -0.03073463  0.01274363
##[3,]  0.05247376  0.34032984 -0.31184408
##
## Running cacheSolve again will retrieve it from the cache, rather
## than recalculating:
##
## > cacheSolve(TestMatrixList)
##getting cached data
##        [,1]        [,2]        [,3]
##[1,] -0.02548726 -0.03673163  0.13718141
##[2,]  0.01949025 -0.03073463  0.01274363
##[3,]  0.05247376  0.34032984 -0.31184408
quit()
## cachematrix is a suite of two functions that work together to store and retrieve
## the inverse of a matrix of interest. The inverse matrix data, once calculated, is
## stored in an object placed in an environment other than the environment in which
## the functions operate. This allows for a stable maintenance of the data, so that
## the inverse of the matrix need not be recalculated once it exists.
## The two functions are makeCacheMatrix  and cacheSolve.
## Acknowledgements:
## My understanding of the processes necessary to this suite was enhanced by
## two sources:
## 1) John Chamber's remarks on "environments" in Chapter 5 of "Software for Data
##    Analysis, Programming with R"
## 2) Norman Matloff's comments on using the superassignment operator in section 7.8
##    of "The Art of R Programming". The section is titled 'Writing Upstairs'!
## Comments on the first function:
## makeCacheMatrix takes an invertible matrix as it's argument and performs two
## important tasks. It creates an object in an environment "outside" that of
## environment of the function that will hold or "cache" the results of applying
## the solve function to the matrix. makeCacheMatrix does not employ the solve
## function itself, (that's the job of the other function in the suite), but, for
## it's second task, returns a list whose elements are the original matirx and functions
## that will allow for the transport of data to and from the "outside" environment.
##
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Comments on the second function:
##cacheSolve does the work of retrieving the desired inverse matrix, if it exists in the
##object "upstairs" created by makeCacheMatrix, or, if not, solving for the inverse,cacheing
## it and returning it to the user. cacheSolve takes as its argument the list created
##by the first function.
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# If the matrix inverse has been calculated, return its cached value
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
# Calculate, using solve(), the matrix inverse, if the inverse has not yet been calculated.
data <- x$get()
inv <- solve(data, ...)
# Now cache the newly created inverse
x$setinv(inv)
# Now return the newly cached value
inv
}
## Here are some examples of the exploits of this suite, as well as a brief look at the
## internals of the objects returned by each.
##
## First, create a matrix to pass to makeCacheMatrix:
## > TestMatrix <- matrix(c(7,9,11,47,1,9,5,4,2),nrow=3,ncol=3)
## Hand it over to makeCacheMatrix and assign the result:
## > TestMatrixList <- makeCacheMatrix(TestMatrix)
## Check to see if the original matrix an element of this list.
## > TestMatrixList$get()
##       [,1] [,2] [,3]
##[1,]    7   47    5
##[2,]    9    1    4
##[3,]   11    9    2
## Running cacheSolve now will create it's inverse and store it.
## > cacheSolve(TestMatrixList)
##         [,1]        [,2]        [,3]
##[1,] -0.02548726 -0.03673163  0.13718141
##[2,]  0.01949025 -0.03073463  0.01274363
##[3,]  0.05247376  0.34032984 -0.31184408
##
## Running cacheSolve again will retrieve it from the cache, rather
## than recalculating:
##
## > cacheSolve(TestMatrixList)
##getting cached data
##        [,1]        [,2]        [,3]
##[1,] -0.02548726 -0.03673163  0.13718141
##[2,]  0.01949025 -0.03073463  0.01274363
##[3,]  0.05247376  0.34032984 -0.31184408
quit()
## cachematrix is a suite of two functions that work together to store and retrieve
## the inverse of a matrix of interest. The inverse matrix data, once calculated, is
## stored in an object placed in an environment other than the environment in which
## the functions operate. This allows for a stable maintenance of the data, so that
## the inverse of the matrix need not be recalculated once it exists.
## The two functions are makeCacheMatrix  and cacheSolve.
## Acknowledgements:
## My understanding of the processes necessary to this suite was enhanced by
## two sources:
## 1) John Chamber's remarks on "environments" in Chapter 5 of "Software for Data
##    Analysis, Programming with R"
## 2) Norman Matloff's comments on using the superassignment operator in section 7.8
##    of "The Art of R Programming". The section is titled 'Writing Upstairs'!
## Comments on the first function:
## makeCacheMatrix takes an invertible matrix as it's argument and performs two
## important tasks. It creates an object in an environment "outside" that of
## environment of the function that will hold or "cache" the results of applying
## the solve function to the matrix. makeCacheMatrix does not employ the solve
## function itself, (that's the job of the other function in the suite), but, for
## it's second task, returns a list whose elements are the original matirx and functions
## that will allow for the transport of data to and from the "outside" environment.
##
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Comments on the second function:
## cacheSolve does the work of retrieving the desired inverse matrix, if it exists in the
## object "upstairs" created by makeCacheMatrix, or, if not, solving for the inverse,cacheing
## it and returning it to the user. cacheSolve takes as its argument the list created
## by the first function.
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# If the matrix inverse has been calculated, return its cached value
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
# Calculate, using solve(), the matrix inverse, if the inverse has not yet been calculated.
data <- x$get()
inv <- solve(data, ...)
# Now cache the newly created inverse
x$setinv(inv)
# Now return the newly cached value
inv
}
## Here are some examples of the exploits of this suite, as well as a brief look at the
## internals of the objects returned by each.
##
## First, create a matrix to pass to makeCacheMatrix:
## > TestMatrix <- matrix(c(7,9,11,47,1,9,5,4,2),nrow=3,ncol=3)
## Hand it over to makeCacheMatrix and assign the result:
##
## > TestMatrixList <- makeCacheMatrix(TestMatrix)
##
## Check to see if the original matrix an element of this list.
##
## > TestMatrixList$get()
##        [,1] [,2] [,3]
## [1,]    7   47    5
## [2,]    9    1    4
## [3,]   11    9    2
##
## Running cacheSolve now will create it's inverse and store it.
## > cacheSolve(TestMatrixList)
##          [,1]        [,2]        [,3]
## [1,] -0.02548726 -0.03673163  0.13718141
## [2,]  0.01949025 -0.03073463  0.01274363
## [3,]  0.05247376  0.34032984 -0.31184408
##
## Running cacheSolve again will retrieve it from the cache, rather
## than recalculating:
##
## > cacheSolve(TestMatrixList)
## getting cached data
##         [,1]        [,2]        [,3]
## [1,] -0.02548726 -0.03673163  0.13718141
## [2,]  0.01949025 -0.03073463  0.01274363
## [3,]  0.05247376  0.34032984 -0.31184408
quit()
## cachematrix is a suite of two functions that work together to store and retrieve
## the inverse of a matrix of interest. The inverse matrix data, once calculated, is
## stored in an object placed in an environment other than the environment in which
## the functions operate. This allows for a stable maintenance of the data, so that
## the inverse of the matrix need not be recalculated once it exists.
## The two functions are makeCacheMatrix  and cacheSolve.
## Acknowledgements:
## My understanding of the processes necessary to this suite was enhanced by
## two sources:
## 1) John Chamber's remarks on "environments" in Chapter 5 of "Software for Data
##    Analysis, Programming with R"
## 2) Norman Matloff's comments on using the superassignment operator in section 7.8
##    of "The Art of R Programming". The section is titled 'Writing Upstairs'!
## Comments on the first function:
## makeCacheMatrix takes an invertible matrix as it's argument and performs two
## important tasks. It creates an object in an environment "outside" that of
## environment of the function that will hold or "cache" the results of applying
## the solve function to the matrix. makeCacheMatrix does not employ the solve
## function itself, (that's the job of the other function in the suite), but, for
## it's second task, returns a list whose elements are the original matirx and functions
## that will allow for the transport of data to and from the "outside" environment.
##
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Comments on the second function:
## cacheSolve does the work of retrieving the desired inverse matrix, if it exists in the
## object "upstairs" created by makeCacheMatrix, or, if not, solving for the inverse,cacheing
## it and returning it to the user. cacheSolve takes as its argument the list created
## by the first function.
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# If the matrix inverse has been calculated, return its cached value
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
# Calculate, using solve(), the matrix inverse, if the inverse has not yet been calculated.
data <- x$get()
inv <- solve(data, ...)
# Now cache the newly created inverse
x$setinv(inv)
# Now return the newly cached value
inv
}
## Here are some examples of the exploits of this suite, as well as a brief look at the
## internals of the objects returned by each.
##
## First, create a matrix to pass to makeCacheMatrix:
## > TestMatrix <- matrix(c(7,9,11,47,1,9,5,4,2),nrow=3,ncol=3)
## Hand it over to makeCacheMatrix and assign the result:
##
## > TestMatrixList <- makeCacheMatrix(TestMatrix)
##
## Check to see if the original matrix an element of this list.
##
## > TestMatrixList$get()
##        [,1] [,2] [,3]
## [1,]    7   47    5
## [2,]    9    1    4
## [3,]   11    9    2
##
## Running cacheSolve now will create it's inverse and store it.
## > cacheSolve(TestMatrixList)
##          [,1]        [,2]        [,3]
## [1,] -0.02548726 -0.03673163  0.13718141
## [2,]  0.01949025 -0.03073463  0.01274363
## [3,]  0.05247376  0.34032984 -0.31184408
##
## Running cacheSolve again will retrieve it from the cache, rather
## than recalculating:
##
## > cacheSolve(TestMatrixList)
## getting cached data
##         [,1]        [,2]        [,3]
## [1,] -0.02548726 -0.03673163  0.13718141
## [2,]  0.01949025 -0.03073463  0.01274363
## [3,]  0.05247376  0.34032984 -0.31184408
quit()
## cachematrix is a suite of two functions that work together to store and retrieve
## the inverse of a matrix of interest. The inverse matrix data, once calculated, is
## stored in an object placed in an environment other than the environment in which
## the functions operate. This allows for a stable maintenance of the data, so that
## the inverse of the matrix need not be recalculated once it exists.
## The two functions are makeCacheMatrix  and cacheSolve.
## Acknowledgements:
## My understanding of the processes necessary to this suite was enhanced by
## two sources:
## 1) John Chamber's remarks on "environments" in Chapter 5 of "Software for Data
##    Analysis, Programming with R"
## 2) Norman Matloff's comments on using the superassignment operator in section 7.8
##    of "The Art of R Programming". The section is titled 'Writing Upstairs'!
## Comments on the first function:
## makeCacheMatrix takes an invertible matrix as it's argument and performs two
## important tasks. It creates an object in an environment "outside" that of
## environment of the function that will hold or "cache" the results of applying
## the solve function to the matrix. makeCacheMatrix does not employ the solve
## function itself, (that's the job of the other function in the suite), but, for
## it's second task, returns a list whose elements are the original matirx and functions
## that will allow for the transport of data to and from the "outside" environment.
##
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Comments on the second function:
## cacheSolve does the work of retrieving the desired inverse matrix, if it exists in the
## object "upstairs" created by makeCacheMatrix, or, if not, solving for the inverse,cacheing
## it and returning it to the user. cacheSolve takes as its argument the list created
## by the first function.
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# If the matrix inverse has been calculated, return its cached value
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
# Calculate, using solve(), the matrix inverse, if the inverse has not yet been calculated.
data <- x$get()
inv <- solve(data, ...)
# Now cache the newly created inverse
x$setinv(inv)
# Now return the newly cached value
inv
}
## Here are some examples of the exploits of this suite, as well as a brief look at the
## internals of the objects returned by each.
##
## First, create a matrix to pass to makeCacheMatrix:
## > TestMatrix <- matrix(c(7,9,11,47,1,9,5,4,2),nrow=3,ncol=3)
## Hand it over to makeCacheMatrix and assign the result:
##
## > TestMatrixList <- makeCacheMatrix(TestMatrix)
##
## Check to see if the original matrix is an element of this list.
##
## > TestMatrixList$get()
##        [,1] [,2] [,3]
## [1,]    7   47    5
## [2,]    9    1    4
## [3,]   11    9    2
##
## Running cacheSolve now will create it's inverse and store it.
## > cacheSolve(TestMatrixList)
##          [,1]        [,2]        [,3]
## [1,] -0.02548726 -0.03673163  0.13718141
## [2,]  0.01949025 -0.03073463  0.01274363
## [3,]  0.05247376  0.34032984 -0.31184408
##
## Running cacheSolve again will retrieve it from the cache, rather
## than recalculating:
##
## > cacheSolve(TestMatrixList)
## getting cached data
##         [,1]        [,2]        [,3]
## [1,] -0.02548726 -0.03673163  0.13718141
## [2,]  0.01949025 -0.03073463  0.01274363
## [3,]  0.05247376  0.34032984 -0.31184408
quit()
