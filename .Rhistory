quit()
getwd
getwd(
)
ls()
load(cachematrix.R)
load("cacheMatrix.R")
ls()
?magic number
?magic
??magic
source("cachematrix.R")
ls()
cacheSolve
ls()
makeCacheMatrix()
makeCacheMatrix
quit
quit()
makeCacheMatrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
Seth <- matrix(c(1,2,3,4),nrow=2,ncol=2)
makeCacheMatrix(Seth)
cSeth <- makeCacheMatrix(Seth)
cacheSolve(cSeth)
cacheSolve(cSeth)
quit()
ls()
cacheSolve
makeCacheMatrix
quit
quit()
ls()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## trial comment
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# If the matrix inverse has been calculated, return its cached value
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
# Calculate, using solve(), the matrix inverse, if the inverse has not yet been calculated.
data <- x$get()
inv <- solve(data, ...)
# Now cache the newly created inverse
x$setinv(inv)
# Now return the newly cached value
inv
}
ls()
makeCacheMatrix
Mary <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3)
cMary <- makeCacheMatrix(Mary)
cMary
cacheSolve(cMary)
Mary
Mary <- matrix(c(1,2,3,4),nrow=2,ncol=2)
cMary <- makeCacheMatrix(Mary)
solveCache(cMary)
cacheSolve(cMary)
Leo <- matrix(c(1:10,nrow=2,ncol=5)
Leo <- matrix(c(1:10),nrow=2,ncol=5)
Leo <- matrix(c(1:10),nrow=2,ncol=5)
cLeo <- makeCacheMatrix(Leo)
cacheSolve(cLeo)
quit()
ls()
itWorks <- matrix(c(5,2,8,3,9,2,1,3,7),nrow=3,ncol=3)
itWorksNow <- makeCacheMatrix(itWorks)
cacheSolve(itWorksNow)
cacheSolve(itWorksNow)
quit()
